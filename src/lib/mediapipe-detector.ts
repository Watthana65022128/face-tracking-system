// MediaPipe face detection and tracking utilities
import { FaceLandmarker, FilesetResolver, NormalizedLandmark } from '@mediapipe/tasks-vision';

// ‡∏ã‡πà‡∏≠‡∏ô TensorFlow Lite INFO messages
const originalConsoleLog = console.log;
const originalConsoleInfo = console.info;

console.log = (...args) => {
  const message = args.join(' ');
  if (message.includes('Created TensorFlow Lite XNNPACK delegate for CPU') || 
      message.includes('TensorFlow Lite')) {
    return; // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á TensorFlow Lite messages
  }
  originalConsoleLog.apply(console, args);
};

console.info = (...args) => {
  const message = args.join(' ');
  if (message.includes('Created TensorFlow Lite XNNPACK delegate for CPU') || 
      message.includes('TensorFlow Lite')) {
    return; // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á TensorFlow Lite INFO messages
  }
  originalConsoleInfo.apply(console, args);
};

export interface FaceTrackingData {
  isDetected: boolean;
  orientation: {
    yaw: number;
    pitch: number;
    isLookingAway: boolean;
    direction?: 'LEFT' | 'RIGHT' | 'UP' | 'DOWN' | 'CENTER';
  };
  confidence: number;
  realTime: string; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:mm:ss
  landmarks?: NormalizedLandmark[];
  multipleFaces?: {
    count: number;
    isSecurityRisk: boolean;
    warningMessage?: string;
  };
  distance?: {
    estimatedCm: number;
    isTooFar: boolean;
    faceWidth: number;
    faceHeight: number;
  };
}

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Orientation Event ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
export interface OrientationEvent {
  startTime: string; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (HH:mm:ss)
  endTime?: string;  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (HH:mm:ss)
  direction: 'LEFT' | 'RIGHT' | 'UP' | 'DOWN' | 'CENTER';
  duration?: number; // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  maxYaw?: number;   // ‡∏°‡∏∏‡∏° yaw ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏±‡πâ‡∏ô
  maxPitch?: number; // ‡∏°‡∏∏‡∏° pitch ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏±‡πâ‡∏ô
  isActive: boolean; // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

export interface FaceDetectionLossEvent {
  startTime: string; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (HH:mm:ss)
  endTime?: string;  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (HH:mm:ss)
  duration?: number; // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  isActive: boolean; // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤
export interface OrientationStats {
  totalEvents: number;
  leftTurns: { count: number; totalDuration: number };
  rightTurns: { count: number; totalDuration: number };
  lookingUp: { count: number; totalDuration: number };
  lookingDown: { count: number; totalDuration: number };
  centerTime: number; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡∏ï‡∏£‡∏á
  sessionStartTime: string;
  lastEventTime?: string;
}

export class MediaPipeDetector {
  private faceLandmarker: FaceLandmarker | null = null;
  private isInitialized: boolean = false;
  private lastDetection: FaceTrackingData | null = null;
  
  // Auto-calibration system ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pitch baseline
  private calibrationSamples: number[] = [];
  private calibrationComplete: boolean = false;
  private calibratedNeutralPosition: number = 0.58; // default value
  
  // Orientation tracking system
  private currentOrientationEvent: OrientationEvent | null = null;
  private orientationHistory: OrientationEvent[] = [];
  private sessionStartTime: string = '';
  private isRecording: boolean = false;
  
  // Face detection loss tracking
  private currentFaceDetectionLossEvent: FaceDetectionLossEvent | null = null;
  private faceDetectionLossHistory: FaceDetectionLossEvent[] = [];
  private lastFaceDetectedTime: number = Date.now();
  private consecutiveLossFrames: number = 0;
  private readonly LOSS_THRESHOLD_FRAMES = 5; // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ loss ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö 5 frames ‡∏ï‡∏¥‡∏î
  
  // Real-time tracking callbacks
  private onOrientationChange?: (direction: 'LEFT' | 'RIGHT' | 'UP' | 'DOWN' | 'CENTER', yaw: number, pitch: number, confidence: number) => void;
  private onFaceDetectionLoss?: (confidence: number) => void;
  private lastSentDirection: string = '';
  
  // Thresholds for direction detection
  private readonly YAW_THRESHOLD = 25;
  private readonly PITCH_THRESHOLD = 12;

  async initialize(): Promise<boolean> {
    try {
      console.log('üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î MediaPipe FaceLandmarker...');
      
      // ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏´‡∏≤‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const filesetResolver = await FilesetResolver.forVisionTasks(
        "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@latest/wasm"
      );
      console.log('‚úÖ FilesetResolver ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î model ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ GPU)
      this.faceLandmarker = await FaceLandmarker.createFromOptions(filesetResolver, {
        baseOptions: {
          modelAssetPath: "https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task",
          delegate: "CPU"
        },
        outputFaceBlendshapes: false, // ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞
        outputFacialTransformationMatrixes: false, // ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞
        runningMode: "VIDEO",
        numFaces: 3 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 3 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      });

      this.isInitialized = true;
      console.log('‚úÖ MediaPipe FaceLandmarker ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      return true;
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î MediaPipe:', error);
      console.error('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error instanceof Error ? error.message : String(error));
      
      // ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      return await this.initializeFallback();
    }
  }

  private async initializeFallback(): Promise<boolean> {
    try {
      console.log('üîÑ ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î MediaPipe ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á...');
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ CDN ‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
      const filesetResolver = await FilesetResolver.forVisionTasks(
        "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.22/wasm"
      );

      this.faceLandmarker = await FaceLandmarker.createFromOptions(filesetResolver, {
        baseOptions: {
          delegate: "CPU"
        },
        runningMode: "VIDEO",
        numFaces: 3 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 3 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      });

      this.isInitialized = true;
      console.log('‚úÖ MediaPipe FaceLandmarker ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á');
      return true;
    } catch (fallbackError) {
      console.error('‚ùå ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡πá‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', fallbackError);
      return false;
    }
  }

  async detectFromVideo(video: HTMLVideoElement): Promise<FaceTrackingData | null> {
    if (!this.isInitialized || !this.faceLandmarker) {
      console.warn('‚ö†Ô∏è MediaPipe ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      return null;
    }

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö video readiness
      if (!video || video.readyState < 2) {
        console.warn('‚ö†Ô∏è Video ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° readyState:', video?.readyState);
        return null;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö faceLandmarker ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
      if (!this.faceLandmarker || typeof this.faceLandmarker.detectForVideo !== 'function') {
        console.error('‚ùå faceLandmarker ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ detectForVideo method ‡πÑ‡∏°‡πà‡∏û‡∏ö');
        return null;
      }

      const results = this.faceLandmarker.detectForVideo(video, performance.now());
      
      if (!results.faceLandmarks || results.faceLandmarks.length === 0) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô MediaPipe results');
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å face detection loss
        this.handleFaceDetectionLoss();
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• real-time face detection loss
        if (this.onFaceDetectionLoss) {
          this.onFaceDetectionLoss(0);
        }
        
        const noFaceData: FaceTrackingData = {
          isDetected: false,
          orientation: { yaw: 0, pitch: 0, isLookingAway: false },
          confidence: 0,
          realTime: new Date().toLocaleTimeString('th-TH', { hour12: false }),
          multipleFaces: {
            count: 0,
            isSecurityRisk: false
          }, 
        };
        
        this.lastDetection = noFaceData;
        return noFaceData;
        
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
      const faceCount = results.faceLandmarks.length;
      const multipleFacesData = {
        count: faceCount,
        isSecurityRisk: faceCount > 1,
        warningMessage: faceCount > 1 ? 
          `‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö ${faceCount} ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤! ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö` : 
          undefined
      };

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      if (faceCount > 1) {
        console.warn(`üö® SECURITY ALERT: ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö ${faceCount} ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤! ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö`);
        console.warn('üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', results.faceLandmarks.map((face, idx) => ({
          face: idx + 1,
          landmarkCount: face.length,
          noseTip: face[1] // ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏à‡∏°‡∏π‡∏Å
        })));
      }

      const landmarks = results.faceLandmarks[0]; // ‡πÉ‡∏ä‡πâ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
      console.log('‚úÖ ‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤! landmarks:', landmarks.length, '‡∏à‡∏∏‡∏î');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß (reset loss tracking)
      this.handleFaceDetectionRecovered();
      
      const trackingData = this.analyzeLandmarks(landmarks);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
      trackingData.multipleFaces = multipleFacesData;
      
      console.log('üìà tracking data:', trackingData);
      
      this.lastDetection = trackingData;
      return trackingData;
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤:', error);
      return null;
    }
  }


  getLastDetection(): FaceTrackingData | null {
    return this.lastDetection;
  }

  private analyzeLandmarks(landmarks: NormalizedLandmark[]): FaceTrackingData {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (Face Orientation)
    const orientation = this.calculateFaceOrientation(landmarks);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏à‡∏≠
    const distance = this.calculateFaceDistance(landmarks);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
    const realTime = new Date().toLocaleTimeString('th-TH', { 
      hour12: false,
      hour: '2-digit',
      minute: '2-digit', 
      second: '2-digit'
    });
    
    return {
      isDetected: true,
      orientation,
      confidence: 0.95, // MediaPipe ‡∏°‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ confidence ‡∏™‡∏π‡∏á
      realTime,
      landmarks, // ‡∏™‡πà‡∏á landmarks ‡∏ó‡∏±‡πâ‡∏á 468 ‡∏à‡∏∏‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡πâ component
      distance
    };
  }

  private calculateFaceOrientation(landmarks: NormalizedLandmark[]) {
    // ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏° MediaPipe FaceMesh 468 landmarks
    const noseTip = landmarks[1];        // ‡∏à‡∏°‡∏π‡∏Å‡∏õ‡∏•‡∏≤‡∏¢
    const leftEyeInner = landmarks[133]; // ‡∏°‡∏∏‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏ã‡πâ‡∏≤‡∏¢
    const rightEyeInner = landmarks[362]; // ‡∏°‡∏∏‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏Ç‡∏ß‡∏≤
    const leftEyeOuter = landmarks[33];   // ‡∏°‡∏∏‡∏°‡∏ô‡∏≠‡∏Å‡∏ï‡∏≤‡∏ã‡πâ‡∏≤‡∏¢  
    const rightEyeOuter = landmarks[263]; // ‡∏°‡∏∏‡∏°‡∏ô‡∏≠‡∏Å‡∏ï‡∏≤‡∏Ç‡∏ß‡∏≤
    const chin = landmarks[18];           // ‡∏Ñ‡∏≤‡∏á
    const forehead = landmarks[10];       // ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏≤‡∏Å

    // Debug: ‡πÅ‡∏™‡∏î‡∏á coordinates ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    console.log('üéØ Landmark Coordinates:', {
      noseTip: { x: noseTip.x, y: noseTip.y },
      leftEyeInner: { x: leftEyeInner.x, y: leftEyeInner.y },
      rightEyeInner: { x: rightEyeInner.x, y: rightEyeInner.y },
      leftEyeOuter: { x: leftEyeOuter.x, y: leftEyeOuter.y },
      rightEyeOuter: { x: rightEyeOuter.x, y: rightEyeOuter.y },
      chin: { x: chin.x, y: chin.y },
      forehead: { x: forehead.x, y: forehead.y }
    });

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì yaw (‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤) ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ï‡∏≤ - **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á**
    const leftEyeWidth = Math.abs(leftEyeOuter.x - leftEyeInner.x);
    const rightEyeWidth = Math.abs(rightEyeOuter.x - rightEyeInner.x);
    
    // **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á**: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ratio < 1, ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤ ratio > 1
    // MediaPipe ‡∏û‡∏¥‡∏Å‡∏±‡∏î: ‡∏ï‡∏≤‡∏ã‡πâ‡∏≤‡∏¢ = ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠), ‡∏ï‡∏≤‡∏Ç‡∏ß‡∏≤ = ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    const eyeRatio = leftEyeWidth / rightEyeWidth; // ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    let yaw = (1 - eyeRatio) * 100; // ‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢: (1 - ratio) ‡πÅ‡∏ó‡∏ô (ratio - 1)
    yaw = Math.max(-60, Math.min(60, yaw)); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î range
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pitch (‡∏´‡∏±‡∏ô‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á) ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
    const totalFaceHeight = Math.abs(chin.y - forehead.y);
    
    // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏à‡∏°‡∏π‡∏Å‡πÉ‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (0-1 scale)
    const noseRelativePosition = (noseTip.y - forehead.y) / totalFaceHeight;
    
    // **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Pitch**: ‡πÉ‡∏ä‡πâ baseline ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô + Auto-calibration
    // Auto-calibration: ‡πÄ‡∏Å‡πá‡∏ö samples ‡πÅ‡∏£‡∏Å 30 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÄ‡∏õ‡πá‡∏ô baseline
    if (!this.calibrationComplete && this.calibrationSamples.length < 30) {
      this.calibrationSamples.push(noseRelativePosition);
      console.log(`üìä Calibrating... Sample ${this.calibrationSamples.length}/30: ${noseRelativePosition.toFixed(4)}`);
      
      if (this.calibrationSamples.length === 30) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏õ‡πá‡∏ô neutral position ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
        const sum = this.calibrationSamples.reduce((a, b) => a + b, 0);
        this.calibratedNeutralPosition = sum / this.calibrationSamples.length;
        this.calibrationComplete = true;
        console.log(`‚úÖ Auto-calibration complete! Personal neutral position: ${this.calibratedNeutralPosition.toFixed(4)}`);
      }
    }
    
    // ‡πÉ‡∏ä‡πâ calibrated baseline ‡∏´‡∏£‡∏∑‡∏≠ default value
    const neutralNosePosition = this.calibratedNeutralPosition;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏à‡∏≤‡∏Å neutral position
    const pitchDeviation = noseRelativePosition - neutralNosePosition;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏á‡∏®‡∏≤‡∏î‡πâ‡∏ß‡∏¢ sensitivity ‡∏ó‡∏µ‡πà‡∏•‡∏î‡∏•‡∏á
    let pitch = pitchDeviation * 80; // ‡∏•‡∏î sensitivity ‡∏à‡∏≤‡∏Å 60 ‡πÄ‡∏õ‡πá‡∏ô 80 (‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á)
    pitch = Math.max(-25, Math.min(25, pitch)); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î range ¬±25¬∞

    const YAW_THRESHOLD = 25;      // ‡∏≠‡∏á‡∏®‡∏≤ (‡∏¢‡∏≤‡∏ß/‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤)
    const PITCH_THRESHOLD = 12;    // ‡∏≠‡∏á‡∏®‡∏≤ (‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏à‡∏≠
    const isLookingAway = Math.abs(yaw) > YAW_THRESHOLD || Math.abs(pitch) > PITCH_THRESHOLD;

    // Debug logging ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    console.log(`üéØ Face Orientation Debug:`);
    console.log(`   Calibration: ${this.calibrationComplete ? 'Complete' : `In progress (${this.calibrationSamples.length}/30)`}`);
    console.log(`   Eye Widths - Left: ${leftEyeWidth.toFixed(4)}, Right: ${rightEyeWidth.toFixed(4)}`);
    console.log(`   Eye Ratio: ${eyeRatio.toFixed(4)}`);
    console.log(`   Face Height: ${totalFaceHeight.toFixed(4)}`);
    console.log(`   Nose Position: ${noseRelativePosition.toFixed(4)} (neutral=${neutralNosePosition.toFixed(4)})`);
    console.log(`   Pitch Deviation: ${pitchDeviation.toFixed(4)} -> ${pitch.toFixed(1)}¬∞ (should be ~0¬∞ when looking straight)`);
    console.log(`   Final - Yaw: ${yaw.toFixed(1)}¬∞, Pitch: ${pitch.toFixed(1)}¬∞, Away: ${isLookingAway}`);

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    const direction = this.getOrientationDirection(yaw, pitch);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å orientation event ‡∏´‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á recording
    if (this.isRecording) {
      this.recordOrientationEvent(direction, yaw, pitch);
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• real-time ‡∏´‡∏≤‡∏Å callback ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
    if (this.onOrientationChange && direction !== this.lastSentDirection) {
      this.onOrientationChange(direction, yaw, pitch, 0.95);
      this.lastSentDirection = direction;
    }

    return { yaw, pitch, isLookingAway, direction };
  }

  private calculateFaceDistance(landmarks: NormalizedLandmark[]) {
    // ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    const leftEar = landmarks[234];      // ‡∏´‡∏π‡∏ã‡πâ‡∏≤‡∏¢
    const rightEar = landmarks[454];     // ‡∏´‡∏π‡∏Ç‡∏ß‡∏≤
    const forehead = landmarks[10];      // ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏≤‡∏Å
    const chin = landmarks[152];         // ‡∏Ñ‡∏≤‡∏á
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (normalized coordinates 0-1)
    const faceWidth = Math.abs(leftEar.x - rightEar.x);
    const faceHeight = Math.abs(forehead.y - chin.y);
    
    // Constants ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ = 14-16 cm
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ = 18-20 cm
    const AVERAGE_FACE_WIDTH_CM = 15;
    const AVERAGE_FACE_HEIGHT_CM = 19;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
    // ‡∏™‡∏π‡∏ï‡∏£: distance = (actual_size_cm * focal_length) / pixel_size
    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì focal length = 500-600 pixels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webcam ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    const FOCAL_LENGTH_ESTIMATE = 550;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    const distanceFromWidth = (AVERAGE_FACE_WIDTH_CM * FOCAL_LENGTH_ESTIMATE) / (faceWidth * 1000);
    const distanceFromHeight = (AVERAGE_FACE_HEIGHT_CM * FOCAL_LENGTH_ESTIMATE) / (faceHeight * 1000);
    
    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ
    const estimatedCm = (distanceFromWidth + distanceFromHeight) / 2;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 80cm ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const DISTANCE_THRESHOLD_CM = 80;
    const isTooFar = estimatedCm > DISTANCE_THRESHOLD_CM;
    
    // Debug logging
    console.log(`üìè Distance Calculation:`, {
      faceWidth: faceWidth.toFixed(4),
      faceHeight: faceHeight.toFixed(4),
      distanceFromWidth: distanceFromWidth.toFixed(1),
      distanceFromHeight: distanceFromHeight.toFixed(1),
      estimatedCm: estimatedCm.toFixed(1),
      isTooFar,
      threshold: DISTANCE_THRESHOLD_CM
    });
    
    return {
      estimatedCm: Math.round(estimatedCm),
      isTooFar,
      faceWidth,
      faceHeight
    };
  }

  // === Orientation Tracking Methods ===
  
  private getOrientationDirection(yaw: number, pitch: number): 'LEFT' | 'RIGHT' | 'UP' | 'DOWN' | 'CENTER' {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö yaw ‡∏Å‡πà‡∏≠‡∏ô (‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤)
    if (Math.abs(yaw) > this.YAW_THRESHOLD) {
      return yaw > 0 ? 'RIGHT' : 'LEFT';
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pitch (‡∏Å‡πâ‡∏°‡∏´‡∏ô‡πâ‡∏≤-‡πÄ‡∏á‡∏¢‡∏´‡∏ô‡πâ‡∏≤)
    if (Math.abs(pitch) > this.PITCH_THRESHOLD) {
      return pitch > 0 ? 'DOWN' : 'UP';
    }
    
    return 'CENTER';
  }
  
  private recordOrientationEvent(direction: 'LEFT' | 'RIGHT' | 'UP' | 'DOWN' | 'CENTER', yaw: number, pitch: number): void {
    const currentTime = new Date().toLocaleTimeString('th-TH', { 
      hour12: false,
      hour: '2-digit',
      minute: '2-digit', 
      second: '2-digit'
    });
    
    // ‡∏´‡∏≤‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ event ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if (!this.currentOrientationEvent || this.currentOrientationEvent.direction !== direction) {
      
      // ‡∏à‡∏ö event ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (this.currentOrientationEvent && this.currentOrientationEvent.isActive) {
        this.finishCurrentEvent(currentTime);
      }
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏° event ‡πÉ‡∏´‡∏°‡πà
      this.currentOrientationEvent = {
        startTime: currentTime,
        direction,
        maxYaw: Math.abs(yaw),
        maxPitch: Math.abs(pitch),
        isActive: true
      };
      
      console.log(`üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ${direction} event ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤ ${currentTime}`);
    } else {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï max values ‡∏Ç‡∏≠‡∏á event ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      if (this.currentOrientationEvent) {
        this.currentOrientationEvent.maxYaw = Math.max(this.currentOrientationEvent.maxYaw || 0, Math.abs(yaw));
        this.currentOrientationEvent.maxPitch = Math.max(this.currentOrientationEvent.maxPitch || 0, Math.abs(pitch));
      }
    }
  }
  
  private finishCurrentEvent(endTime: string): void {
    if (!this.currentOrientationEvent || !this.currentOrientationEvent.isActive) return;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    const startTime = this.parseTimeString(this.currentOrientationEvent.startTime);
    const endTimeMs = this.parseTimeString(endTime);
    const duration = Math.round((endTimeMs - startTime) / 1000); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å event ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    const completedEvent: OrientationEvent = {
      ...this.currentOrientationEvent,
      endTime,
      duration,
      isActive: false
    };
    
    this.orientationHistory.push(completedEvent);
    
    console.log(`‚úÖ ‡∏à‡∏ö ${completedEvent.direction} event: ${completedEvent.duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (${completedEvent.startTime} - ${completedEvent.endTime})`);
    console.log(`   Max Yaw: ${completedEvent.maxYaw?.toFixed(1)}¬∞, Max Pitch: ${completedEvent.maxPitch?.toFixed(1)}¬∞`);
  }
  
  private parseTimeString(timeStr: string): number {
    const [hours, minutes, seconds] = timeStr.split(':').map(Number);
    return hours * 3600000 + minutes * 60000 + seconds * 1000; // milliseconds
  }
  
  // === Session Management ===
  
  startRecording(): void {
    this.isRecording = true;
    this.sessionStartTime = new Date().toLocaleTimeString('th-TH', { 
      hour12: false,
      hour: '2-digit',
      minute: '2-digit', 
      second: '2-digit'
    });
    this.orientationHistory = [];
    this.currentOrientationEvent = null;
    
    // Reset face detection loss statistics ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡πÉ‡∏´‡∏°‡πà
    this.resetFaceDetectionLossStats();
    
    console.log(`üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å orientation tracking ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤ ${this.sessionStartTime}`);
    console.log(`üîÑ Reset face detection loss statistics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session ‡πÉ‡∏´‡∏°‡πà`);
  }
  
  stopRecording(): OrientationEvent[] {
    this.isRecording = false;
    
    // ‡∏à‡∏ö event ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (this.currentOrientationEvent && this.currentOrientationEvent.isActive) {
      const currentTime = new Date().toLocaleTimeString('th-TH', { 
        hour12: false,
        hour: '2-digit',
        minute: '2-digit', 
        second: '2-digit'
      });
      this.finishCurrentEvent(currentTime);
    }
    
    console.log(`üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å orientation tracking`);
    console.log(`üìä ‡∏£‡∏ß‡∏° ${this.orientationHistory.length} events ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ`);
    
    return [...this.orientationHistory]; // return copy
  }
  
  getOrientationStats(): OrientationStats {
    const stats: OrientationStats = {
      totalEvents: this.orientationHistory.length,
      leftTurns: { count: 0, totalDuration: 0 },
      rightTurns: { count: 0, totalDuration: 0 },
      lookingUp: { count: 0, totalDuration: 0 },
      lookingDown: { count: 0, totalDuration: 0 },
      centerTime: 0,
      sessionStartTime: this.sessionStartTime,
      lastEventTime: this.orientationHistory[this.orientationHistory.length - 1]?.endTime
    };
    
    this.orientationHistory.forEach(event => {
      const duration = event.duration || 0;
      
      switch (event.direction) {
        case 'LEFT':
          stats.leftTurns.count++;
          stats.leftTurns.totalDuration += duration;
          break;
        case 'RIGHT':
          stats.rightTurns.count++;
          stats.rightTurns.totalDuration += duration;
          break;
        case 'UP':
          stats.lookingUp.count++;
          stats.lookingUp.totalDuration += duration;
          break;
        case 'DOWN':
          stats.lookingDown.count++;
          stats.lookingDown.totalDuration += duration;
          break;
        case 'CENTER':
          stats.centerTime += duration;
          break;
      }
    });
    
    return stats;
  }
  
  getDetailedOrientationHistory(): OrientationEvent[] {
    return [...this.orientationHistory];
  }
  
  isCurrentlyRecording(): boolean {
    return this.isRecording;
  }

  // === Face Detection Loss Management ===
  
  private handleFaceDetectionLoss(): void {
    this.consecutiveLossFrames++;
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà loss (consecutive frames >= threshold)
    if (this.consecutiveLossFrames === this.LOSS_THRESHOLD_FRAMES) {
      const now = new Date();
      const startTime = now.toLocaleTimeString('th-TH', { hour12: false });
      
      this.currentFaceDetectionLossEvent = {
        startTime,
        isActive: true
      };
      
      console.log(`üö® Face Detection Loss Event - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô loss event`);
      console.log(`   Consecutive loss frames: ${this.consecutiveLossFrames}`);
      console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° loss: ${startTime}`);
    }
    
    // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏Ñ‡∏á loss ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
    if (this.consecutiveLossFrames > this.LOSS_THRESHOLD_FRAMES) {
      console.log(`‚è≥ Face Detection Loss ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠... frame ${this.consecutiveLossFrames}`);
    }
  }
  
  private handleFaceDetectionRecovered(): void {
    // ‡∏´‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á loss ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (this.consecutiveLossFrames >= this.LOSS_THRESHOLD_FRAMES && this.currentFaceDetectionLossEvent) {
      const now = new Date();
      const endTime = now.toLocaleTimeString('th-TH', { hour12: false });
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
      const startTimeParts = this.currentFaceDetectionLossEvent.startTime.split(':');
      const endTimeParts = endTime.split(':');
      
      const startTimeMs = (parseInt(startTimeParts[0]) * 3600 + parseInt(startTimeParts[1]) * 60 + parseInt(startTimeParts[2])) * 1000;
      const endTimeMs = (parseInt(endTimeParts[0]) * 3600 + parseInt(endTimeParts[1]) * 60 + parseInt(endTimeParts[2])) * 1000;
      
      const duration = Math.max(1, Math.round((endTimeMs - startTimeMs) / 1000));
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó event ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á history
      this.currentFaceDetectionLossEvent.endTime = endTime;
      this.currentFaceDetectionLossEvent.duration = duration;
      this.currentFaceDetectionLossEvent.isActive = false;
      
      this.faceDetectionLossHistory.push({ ...this.currentFaceDetectionLossEvent });
      
      console.log(`‚úÖ Face Detection Recovered! Loss Event ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î`);
      console.log(`   ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ loss: ${duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
      console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤: ${this.currentFaceDetectionLossEvent.startTime} ‚Üí ${endTime}`);
      console.log(`   ‡∏£‡∏ß‡∏° loss events: ${this.faceDetectionLossHistory.length} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
      
      // Reset current event
      this.currentFaceDetectionLossEvent = null;
    }
    
    // Reset consecutive loss frames counter
    this.consecutiveLossFrames = 0;
    this.lastFaceDetectedTime = Date.now();
  }
  
  getFaceDetectionLossStats(): { lossCount: number; totalLossTime: number } {
    const totalLossTime = this.faceDetectionLossHistory.reduce((total, event) => total + (event.duration || 0), 0);
    return {
      lossCount: this.faceDetectionLossHistory.length,
      totalLossTime
    };
  }
  
  getFaceDetectionLossEvents(): FaceDetectionLossEvent[] {
    return [...this.faceDetectionLossHistory];
  }
  
  resetFaceDetectionLossStats(): void {
    this.faceDetectionLossHistory = [];
    this.currentFaceDetectionLossEvent = null;
    this.consecutiveLossFrames = 0;
    this.lastFaceDetectedTime = Date.now();
    
    console.log('üîÑ Reset face detection loss statistics');
  }

  // === Real-time Tracking Methods ===
  
  setRealtimeCallbacks(
    onOrientationChange?: (direction: 'LEFT' | 'RIGHT' | 'UP' | 'DOWN' | 'CENTER', yaw: number, pitch: number, confidence: number) => void,
    onFaceDetectionLoss?: (confidence: number) => void
  ): void {
    this.onOrientationChange = onOrientationChange;
    this.onFaceDetectionLoss = onFaceDetectionLoss;
    this.lastSentDirection = '';
    console.log('üì° Real-time tracking callbacks ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
  }
  
  clearRealtimeCallbacks(): void {
    this.onOrientationChange = undefined;
    this.onFaceDetectionLoss = undefined;
    this.lastSentDirection = '';
    console.log('üì° Real-time tracking callbacks ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
  }

  destroy(): void {
    if (this.faceLandmarker) {
      this.faceLandmarker = null;
    }
    this.isInitialized = false;
    this.lastDetection = null;
    
    // Reset calibration
    this.calibrationSamples = [];
    this.calibrationComplete = false;
    this.calibratedNeutralPosition = 0.58;
    
    // Clear real-time callbacks
    this.clearRealtimeCallbacks();
    
    console.log('üßπ MediaPipe detector ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á calibration data ‡πÅ‡∏•‡∏∞ real-time callbacks)');
  }
}